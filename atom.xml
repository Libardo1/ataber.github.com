<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TaberBlog]]></title>
  <link href="http://ataber.github.com/atom.xml" rel="self"/>
  <link href="http://ataber.github.com/"/>
  <updated>2013-06-30T16:16:05-07:00</updated>
  <id>http://ataber.github.com/</id>
  <author>
    <name><![CDATA[Andrew Taber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Just Start Over]]></title>
    <link href="http://ataber.github.com/blog/2013/06/30/just-start-over/"/>
    <updated>2013-06-30T15:10:00-07:00</updated>
    <id>http://ataber.github.com/blog/2013/06/30/just-start-over</id>
    <content type="html"><![CDATA[<p>The other day I decided to walk away from a weightlifting session after having only done two sets. I hadn&#8217;t made progress in days and every session I seemed to get weaker. So I started over. I deloaded 15% and focused on form, like a beginner. At first it felt like I was giving up, but I&#8217;ve come to realize sometimes there&#8217;s nothing more useful than starting over.</p>


<br />


<p>After days of not making substantial progress on an endeavor that is central to my ego-health, I have a tendency to lean in to the frustration. My capacity for focus and my determination curdle in the white-hot frustration and my effort turns into an engine producing nothing of value, only more frustration.</p>


<br />


<p>So I&#8217;ve tried a new tactic: take on a perspective of frequently restarting. The body and mind work best when driven by sinusoidal force, so I can resonate with that natural tendency if I tell myself I&#8217;m a beginner at everything I do (which isn&#8217;t far from the truth), because I won&#8217;t fall for any kind of sunk cost fallacy. The same goes for my work in software: I completely restarted my pet project, and in two days I have more functionality than the previous version did.</p>


<br />


<p>I&#8217;ve given myself permission to ask questions like a novice and to reassess my work without fear of self-reproach because <strong>darn it, I&#8217;m new at this</strong>. It&#8217;s liberating and powerful, and I have a suspiscion many masters have exactly the same outlook towards their craft.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Treat Job Prospects Like Humans]]></title>
    <link href="http://ataber.github.com/blog/2013/04/25/treat-job-prospects-like-humans/"/>
    <updated>2013-04-25T17:06:00-07:00</updated>
    <id>http://ataber.github.com/blog/2013/04/25/treat-job-prospects-like-humans</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been applying to a lot of jobs lately, and I&#8217;ve noticed that a
surprising number of shops, even startups, do not treat me like a human. One
place (a small startup with no HR department) even sent me an email a month and
a half after I&#8217;d applied with instructions about how to sign up for some service
they use to screen job applicants. Not even a &#8220;thank you for applying&#8221;, not even
a personalized email. Not even on time (I&#8217;ve accepted another offer already) and
not even with a reference to the original company I was applying to (only by
googling the person who sent the email did I find out what company they were
from).</p>


<p>And you complain about not being able to find talent?</p>


<p>I call bullshit.</p>


<p>I answered a job post on HackerNews and I got a canned response that was
faulty in every way. And you expect me to believe you&#8217;re going to treat your
customers, investors, and employees any better?</p>


<p>Or how about another company which posts jobs to HackerNews just about every
week with a puzzle in it that is completely incomprehensible and must be solved
<strong>TO EVEN EMAIL THEM</strong>? Obviously all your employees are automatons, because
presumably you&#8217;re treating me like you treat them.</p>


<p>The digital age has been dramatically labor-reducing in a lot of ways. But
so many people don&#8217;t leverage the technology we have today <strong>to make
interactions more, rather than less, personal</strong>. AirBnB does this, why can&#8217;t
everyone?</p>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estopp that Man!]]></title>
    <link href="http://ataber.github.com/blog/2013/04/14/estopp-that-man/"/>
    <updated>2013-04-14T15:51:00-07:00</updated>
    <id>http://ataber.github.com/blog/2013/04/14/estopp-that-man</id>
    <content type="html"><![CDATA[<p>Ever had your heart broken by promises that were left unfulfilled? In legal
theory there&#8217;s a concept called &#8220;Estoppel&#8221; that precludes someone from escaping
from the consequences of their promises, even if the promises are informal and
not technically legally binding. In other words, even if you didn&#8217;t sign a
contract saying you&#8217;d do something, if someone&#8217;s counting on you to do that
thing, you can&#8217;t get out of it just because you didn&#8217;t squiggle your name on a
piece of paper.</p>


<p>I encountered this concept last semester in my jurisprudence class, and I&#8217;ve
got to say, I wish we had a similar concept in computer programming. I think
everyone can agree the most frustrating parts of dynamic languages is their lack
of explicit contracts between functions. In Python, for instance, you have to
explicitly document what you expect each function to take in and output. If you
don&#8217;t you get bizarre, often silent, errors. In C, however, the prototype of
each function declares a certain type contract you must abide by.</p>


<p>So how does the average Python programmer deal with an implicit type
contract? Usually I see docstrings that beg for proper usage, or for simpler
programs nothing at all in the hopes that anyone smart enough can decipher the
purpose and requirements of their code. I&#8217;m not satisfied with this! In legal
terms there&#8217;s nothing estopping (that&#8217;s how you say it!) a developer to change
their program&#8217;s contracts (except perhaps the ever-present-but-low probability that
one of their users is an axe-murderer!).</p>


<p>I propose a solution to the un-estoppe-able tragedy of dynamic languages: algorithmically making
explicit the dependencies of functions and printing these dependencies in the
prototype of functions. In other words, you can have the benefit of dynamic
languages as you&#8217;re writing your program, but when it&#8217;s time to publish to
Github, a program either discovers your functions&#8217; dependencies or prompts you
to declare them and then makes it easy for other developers to understand your
code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picking the Right Words]]></title>
    <link href="http://ataber.github.com/blog/2013/04/11/picking-the-right-words/"/>
    <updated>2013-04-11T15:53:00-07:00</updated>
    <id>http://ataber.github.com/blog/2013/04/11/picking-the-right-words</id>
    <content type="html"><![CDATA[<p>In mathematics, the units of technology are words. Progress is measured in
terms of the elegance with which complex ideas can be represented. And this is
dependent on the quality of words we choose to represent our ideas. </p>


<p>That&#8217;s why I enjoy mathematics: the central struggle is to reframe complex
problems in ways where it is trivial to imagine a solution. The goal of any
research program is to find just the right linguistic prism (or sieve) to seperate the
muddled reality of a problem into its constituent components.</p>


<p>In programming, I often find that &#8220;seperating things that change from things
that stay the same&#8221; is a common refrain, and it rhymes with the one
mathematicians have been preaching for some time. Let&#8217;s just be more
straightforward about it: like math, the goal of computer science is to find the right words to
express yourself.</p>


<p>I like this perspective because it constrains programmers to realize that
everything from data structures to frameworks like Rails exist because they are
in some way &#8220;the right words&#8221; for a given situation. These may not be the
fastest ways of solving the problem, but sometimes the benefit of clear
expression is worth the sacrifice.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Code, Ship, Repeat Fallacy]]></title>
    <link href="http://ataber.github.com/blog/2013/02/27/the-code-ship-repeat-fallacy/"/>
    <updated>2013-02-27T00:47:00-08:00</updated>
    <id>http://ataber.github.com/blog/2013/02/27/the-code-ship-repeat-fallacy</id>
    <content type="html"><![CDATA[<p>Around campus I&#8217;ve been seeing a lot of t-shirts that say simply
&#8220;Code, Ship, Repeat&#8221;. That got me thinking: do companies actually
mean to prescripe this recipe to employees and use it as a branding tool? 
Nowhere in the Caesarian terseness of that mantra is there a reference to
testing, validation, refactoring, or even making sure that the code you write is
going to be used by anybody. 
<br>
<p>It&#8217;s neat to have a three-word slogan, but slogans can have an enormous impact on 
how people see their work. Imagine a civil engineer wearing a t-shirt that said
&#8220;Draw, Build, Repeat&#8221;. I wouldn&#8217;t trust that engineer with a sizeable project. 
Programming is no different except the stakes of failure are more chronic and
less dramatic. Instead of buildings collapsing, poor software engineering leads
to wasted weeks. Not as news-worthy, sure. But tragic nonetheless.
<br>
<p>I believe ideologies towards programming like &#8220;Code, Ship, Repeat&#8221; are
dangerous and inevitably lead to cancerous code growth. So instead, I propose a
new slogan for mid-life companies no longer focused on producing a MVP:
&#8220;Refactor, Delete, Repeat&#8221;. 
<br>
<p>Because a product that isn&#8217;t minimal isn&#8217;t viable for long. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autonomy of the Avatar]]></title>
    <link href="http://ataber.github.com/blog/2013/02/17/autonomy-of-the-avatar/"/>
    <updated>2013-02-17T16:25:00-08:00</updated>
    <id>http://ataber.github.com/blog/2013/02/17/autonomy-of-the-avatar</id>
    <content type="html"><![CDATA[<p>It&#8217;s often said that anonymity is the distinguishing, delightful, and dangerous property of the internet. 
Anonymity is blamed as the factor causing internet trolls and low-quality
discourse online, but I believe the more harmful phenonenon the internet creates
opportunity for is something I call autonomous avatars. 
<br>
<p>With Facebook, Twitter or Reddit, it becomes possible within minutes to forge a 
new personality. In fact, not only is it possible, but practically omnipresent: how
many people do you know who selectively post to Facebook in order to create a more
aesthetically pleasing version of themselves?
<br>
<p>These avatars we create for ourselves are becoming a source of motivation: 
pictures are taken for the sole purpose of posting to Facebook, for example.
These avatars in a sense become autonomous. The identities we craft online 
affect how we behave in a bizarre feedback loop.
<br>
<p>But this doesn&#8217;t qualify as dangerous yet. What I believe makes the autonomous
avatar more dangerous than anonymity is the fact that in a truly anonymous situation,
repercussions of actions are nonexistent. This precludes positive social reinforcement as
much as punishment. Without social reinforcement, the group is less likely to become
a torch-carrying mob. However, when we introduce artificial identities, it is more likely
that cognitive dissonance motivates behavior that would otherwise be unthinkable.
<br>
<p>I believe this is why bullying on Facebook is much more dangerous than that on 4chan.
The bullys on Facebook have a facade to hold up, and this pushes antisocial behavior to a whole other level.

]]></content>
  </entry>
  
</feed>
